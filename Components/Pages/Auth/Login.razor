@page "/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using TicketSystem.Services
@inject NavigationManager _navigationManager
@inject UserService UserService
@inject IHttpContextAccessor HttpContextAccessor
@inject ILogger<Login> Logger
<PageTitle>Login</PageTitle>

<div class="flex items-center justify-center h-full">
    <div class="bg-gray-50 dark:bg-gray-800 p-8 rounded-lg shadow-xl max-w-sm w-full">
        <h3 class="text-3xl font-semibold text-center text-gray-900 dark:text-white mb-6">Login</h3>
        <EditForm Model="Model" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-4">
                <label for="username" class="block text-gray-900 dark:text-white text-sm font-semibold mb-2">Username or Email</label>
                <InputText id="username" @bind-Value="Model.Username" class="bg-gray-50 w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                <ValidationMessage For="() => Model.Username" class="text-red-500" />
            </div>

            <div class="mb-4">
                <label for="password" class="block text-gray-900 dark:text-white text-sm font-semibold mb-2">Password</label>
                <InputText id="password" type="password" @bind-Value="Model.Password" class="bg-gray-50 w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                <ValidationMessage For="() => Model.Password" class="text-red-500" />
            </div>

            <div class="mb-4">
                <button type="submit" class="w-full text-white bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
                    Login
                </button>
            </div>
        </EditForm>
        <div class="text-center">
            <p class="text-sm font-light text-gray-500 dark:text-gray-400">Don't have an account? <a href="/register" class="font-medium text-primary-600 hover:underline dark:text-primary-500">Register here</a></p>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginModel Model { get; set; } = new();

    private async Task HandleLogin()
    {
        var foundUser = await UserService.LoginAsync(Model.Username, Model.Password);
        if (foundUser == null)
        {
            Logger.LogWarning("No user found with provided credentials.");
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, foundUser.Username),
            new Claim(ClaimTypes.Role, foundUser.IsAdmin ? "Admin" : "User"),
            new Claim(ClaimTypes.NameIdentifier, foundUser.Id.ToString())
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        Logger.LogInformation("HttpContext is accessible.");


        await HttpContextAccessor.HttpContext.SignInAsync(principal);
        _navigationManager.NavigateTo("/");
    }


    public class LoginModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}
