@page "/backlog"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using TicketSystem.Services
@using TicketSystem.Models

@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject SprintService SprintService
@inject TicketService TicketService

@rendermode InteractiveServer
<section class="bg-gray-50 dark:bg-gray-900 w-full p-3 sm:p-5">
    <div class="mx-auto w-full px-4 lg:px-12">
        <div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden">
            <div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
                <h1 class="text-lg font-bold text-gray-900 dark:text-white">My Tickets</h1>
                <button @onclick="NavigateToCreateTicket" type="button" class="flex items-center justify-center text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800">
                    <i class="fas fa-plus mr-2"></i> Add Ticket
                </button>
            </div>

            <!-- Filters -->
            <div class="flex flex-col md:flex-row gap-4 p-4">
                <div class="flex items-center space-x-2">
                    <label class="text-sm font-medium dark:text-white">Search:</label>
                    <InputText @bind-Value="searchQuery" class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white" placeholder="Search by Title or Description" />
                </div>
                <div class="flex items-center space-x-2">
                    <label class="text-sm font-medium dark:text-white">Status:</label>
                    <select @bind="filterStatus" class="p-2 rounded-lg bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white">
                        <option value="">All</option>
                        <option value="@TicketStatus.Offen">Offen</option>
                        <option value="@TicketStatus.InBearbeitung">In Bearbeitung</option>
                        <option value="@TicketStatus.Erledigt">Erledigt</option>
                    </select>
                </div>
            </div>

            <!-- Ticket Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 p-4">
                @foreach (var ticket in FilteredTickets)
                {
                    <div class="w-full max-w-sm bg-gray-200 border border-gray-200 rounded-lg shadow dark:bg-gray-700 dark:border-gray-700">
                        <div class="px-5 py-5">
                            <div class="flex justify-between items-center">
                                <div class="flex items-center justify-center gap-1">
                                    <span>@ticket?.Emoji</span>
                                    <h5 class="text-xl font-semibold tracking-tight text-gray-900 dark:text-white">@ticket?.Title</h5>
                                </div>
                                <div class="flex gap-1 items-center justify-center">
                                    <span class="w-8 h-4 me-1 rounded-full" style="background-color: @ticket?.Color"></span>
                                    <select value="@ticket?.Status" @onchange="(e) => UpdateTicketStatus(ticket, e)" class="text-xs font-semibold px-2.5 py-0.5 rounded @GetTicketColor(ticket?.Status ?? TicketStatus.Offen) text-gray-800 dark:text-gray-800 border border-gray-300 dark:border-gray-600">
                                        <option class="@GetTicketColor(TicketStatus.Offen)" value="@TicketStatus.Offen">Offen</option>
                                        <option class="@GetTicketColor(TicketStatus.InBearbeitung)" value="@TicketStatus.InBearbeitung">In Bearbeitung</option>
                                        <option class="@GetTicketColor(TicketStatus.Erledigt)" value="@TicketStatus.Erledigt">Erledigt</option>
                                    </select>
                                </div>
                            </div>
                            <p class="text-sm text-gray-500 dark:text-gray-400 mt-2 max-h-lg truncate">@ticket?.Description</p>
                            <div class="flex items-center justify-end gap-1 mt-4">
                                <button @onclick="() => NavigateToEditTicket(ticket.Id)" class="px-3 py-2 text-green-200 rounded-md hover:bg-green-700/50 transition-colors">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button @onclick="() => ConfirmDeleteTicket(ticket)" class="px-3 py-2 text-red-500  rounded-md hover:bg-red-700/50 transition-colors">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> authStateTask { get; set; }
    private int userId;
    private List<Ticket?> Tickets;

    // Filter and search variables
    private string searchQuery = "";
    private TicketStatus? filterStatus = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateTask;
        var user = authState.User;
        userId = Convert.ToInt32(user.FindFirst(ClaimTypes.NameIdentifier).Value);
        Tickets = await TicketService.GetTicketsWithoutSprintAsync(userId);
    }

    private List<Ticket?> FilteredTickets
    {
        get
        {
            var filtered = Tickets.AsQueryable();
            if (filtered.Count() == 0)
            {
                return filtered.ToList();
            }

            // Filter by search query (search by Title and Description)
            if (!string.IsNullOrEmpty(searchQuery))
            {
                filtered = filtered.Where(ticket =>
                    ticket.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    ticket.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));
            }

            // Filter by status
            if (filterStatus.HasValue)
            {
                filtered = filtered.Where(ticket => ticket.Status == filterStatus.Value);
            }

            return filtered.ToList();
        }
    }

    private String GetTicketColor(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Offen => "bg-gray-100 text-gray-800 dark:bg-gray-200 dark:text-gray-800",
            TicketStatus.InBearbeitung => "bg-blue-100 text-blue-800 dark:bg-blue-200 dark:text-blue-800",
            TicketStatus.Erledigt => "bg-green-100 text-green-800 dark:bg-green-200 dark:text-green-800",
            _ => "bg-gray-100 text-gray-800 dark:bg-gray-200 dark:text-gray-800",
        };
    }

    private async Task UpdateTicketStatus(Ticket ticket, ChangeEventArgs e)
    {
        if (Enum.TryParse(typeof(TicketStatus), e.Value?.ToString(), out var result))
        {
            ticket.Status = (TicketStatus)result;

            // Update the ticket in the database
            await TicketService.UpdateAsync(ticket);

            Tickets = await TicketService.GetTicketsWithoutSprintAsync(userId);
        }
        else
        {
            // Handle invalid status if necessary
            Console.WriteLine("Invalid status value received.");
        }
    }


    private void NavigateToCreateTicket()
    {
        NavigationManager.NavigateTo($"/create-ticket");
    }

    private void NavigateToEditTicket(int ticketId)
    {
        NavigationManager.NavigateTo($"/edit-ticket/{ticketId}");
    }

    private async Task ConfirmDeleteTicket(Ticket ticket)
    {
        await TicketService.DeleteAsync(ticket);
        Tickets = await TicketService.GetTicketsWithoutSprintAsync(userId);
    }
}
