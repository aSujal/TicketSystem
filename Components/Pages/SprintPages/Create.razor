@attribute [Authorize]
@page "/create-sprint"
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using TicketSystem.Models
@using TicketSystem.Services

@inject NavigationManager NavigationManager
@inject SprintService SprintService
@rendermode InteractiveServer

<PageTitle>Create Sprint</PageTitle>

<section class="bg-gray-50 dark:bg-gray-900 w-full p-3 sm:p-5">
    <div class="mx-auto max-w-screen-md px-4 lg:px-12">
        <div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden p-6">
            <h1 class="text-lg font-bold text-gray-900 dark:text-white mb-4">Create a New Sprint</h1>
            <EditForm Model="NewSprint" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="mb-4 text-red-600" />

                <div class="mb-4">
                    <label for="sprintName" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Sprint Name</label>
                    <InputText id="sprintName" class="w-full mt-1 px-3 py-2 border rounded-lg focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
                               @bind-Value="NewSprint.Name" />
                    <ValidationMessage For="@(() => NewSprint.Name)" class="text-red-600 text-sm mt-1" />
                </div>

                <div class="mb-4">
                    <label for="startDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Start Date</label>
                    <InputDate id="startDate" class="w-full mt-1 px-3 py-2 border rounded-lg focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
                               @bind-Value="NewSprint.StartDate" />
                    <ValidationMessage For="@(() => NewSprint.StartDate)" class="text-red-600 text-sm mt-1" />
                </div>

                <div class="mb-4">
                    <label for="endDate" class="block text-sm font-medium text-gray-700 dark:text-gray-300">End Date</label>
                    <InputDate id="endDate" class="w-full mt-1 px-3 py-2 border rounded-lg focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
                               @bind-Value="NewSprint.EndDate" />
                    <ValidationMessage For="@(() => NewSprint.EndDate)" class="text-red-600 text-sm mt-1" />
                </div>

                <!-- Color Picker -->
                <div class="mb-4">
                    <label for="color" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Sprint Color</label>
                    <InputText id="color" type="color"
                               class="w-full mt-1 rounded-md border-gray-500"
                               @bind-Value="NewSprint.Color" />
                    <ValidationMessage For="@(() => NewSprint.Color)" class="text-red-600 text-sm mt-1" />
                </div>


                <div class="flex items-center justify-end w-full">
                    <button type="submit" class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800">
                        Create Sprint
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</section>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authStateTask { get; set; }
    private int userId;

    private Sprint NewSprint = new Sprint
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1)
        };

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateTask;
        var user = authState.User;
        userId = Convert.ToInt32(user.FindFirst(ClaimTypes.NameIdentifier).Value);
        NewSprint.UserId = userId;
    }

    private async Task HandleValidSubmit()
    {
        // If the sprint name is empty, set it to a random name
        if (string.IsNullOrEmpty(NewSprint.Name))
        {
            NewSprint.Name = GenerateRandomSprintName();
        }
        // Save the sprint using the SprintService
        await SprintService.CreateAsync(NewSprint);

        // Navigate back to the main page or show a success message
        NavigationManager.NavigateTo("/");
    }

    private string GenerateRandomSprintName()
    {
        var random = new Random();
        var name = "Sprint-" + DateTime.Now.ToString("yyyyMMdd-HHmmss") + "-" + random.Next(1000, 9999);
        return name;
    }
}
