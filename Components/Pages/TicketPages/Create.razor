@page "/create-ticket/{SprintId?}"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using TicketSystem.Models
@using TicketSystem.Services
@inject SprintService SprintService
@inject TicketService TicketService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Create Ticket</PageTitle>

<section class="bg-gray-50 dark:bg-gray-900 w-full p-3 sm:p-5">
    <div class="mx-auto w-full max-w-4xl px-4 lg:px-12">
        <div class="bg-white dark:bg-gray-800 relative shadow-md sm:rounded-lg overflow-hidden">
            <div class="p-4">
                <h1 class="text-lg font-bold text-gray-900 dark:text-white">Create Ticket</h1>
                <p class="text-sm text-gray-500 dark:text-gray-400">
                    Add a new ticket
                    @if (currentSprint != null)
                    {
                        <span>to the sprint: <strong>@currentSprint.Name</strong></span>
                    }
                </p>
            </div>
            <div class="p-4">
                <EditForm Model="NewTicket" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="mb-4 text-red-600" />

                    <div class="mb-4">
                        <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Title</label>
                        <InputText id="title" class="w-full mt-1 px-3 py-2 border rounded-lg focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
                                   @bind-Value="NewTicket.Title" />
                        <ValidationMessage For="@(() => NewTicket.Title)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <div class="mb-4">
                        <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Description</label>
                        <InputTextArea id="description" class="w-full mt-1 px-3 py-2 border rounded-lg focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
                                       @bind-Value="NewTicket.Description"></InputTextArea>
                        <ValidationMessage For="@(() => NewTicket.Description)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <div class="mb-4">
                        <label for="points" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Points</label>
                        <p class="text-gray-700 dark:text-gray-300">@NewTicket.Points</p>
                        <input type="range" id="points"
                               class="w-full mt-1"
                               min="0" max="100" step="10"
                               @bind="NewTicket.Points" />
                        <ValidationMessage For="@(() => NewTicket.Points)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <div class="mb-4">
                        <label for="status" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Status</label>
                        <InputSelect id="status" class="w-full mt-1 px-3 py-2 border rounded-lg focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white"
                                     @bind-Value="NewTicket.Status">
                            @foreach (var status in Enum.GetValues(typeof(TicketStatus)).Cast<TicketStatus>())
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-4">
                        <label for="color" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Ticket Color</label>
                        <InputText id="color" type="color"
                                   class="w-full mt-1 rounded-md"
                                   @bind-Value="NewTicket.Color" />
                        <ValidationMessage For="@(() => NewTicket.Color)" class="text-red-600 text-sm mt-1" />
                    </div>
                    <div class="mb-4">
                        <label for="emoji-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Ticket Emoji</label>
                        <InputSelect id="emoji-select" class="w-full px-3 py-2 border rounded-lg dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                     @bind-Value="@NewTicket.Emoji">
                            <option value="">None</option>
                            @foreach (var emoji in emojis)
                            {
                                <option value="@emoji">@emoji</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NewTicket.Emoji)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <div class="flex items-center justify-end w-full">
                        <button type="submit" class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-primary-600 dark:hover:bg-primary-700 focus:outline-none dark:focus:ring-primary-800">
                            Create Ticket
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public string? SprintId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authStateTask { get; set; }

    private string[] emojis = new[] { "😀", "😂", "🥰", "😍", "😎", "👍", "✨", "🔥", "📝" };
    private int currentUserId;
    private Sprint currentSprint;
    private Ticket NewTicket = new Ticket() { Title = "New Feature"};

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authStateTask;
        var user = authState.User;
        currentUserId = Convert.ToInt32(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);

        if (!string.IsNullOrEmpty(SprintId) && int.TryParse(SprintId, out int sprintId))
        {
            currentSprint = await SprintService.GetByIdAsync(sprintId);
            if (currentSprint != null)
            {
                NewTicket.SprintId = currentSprint.Id;
            }
            else
            {
                NavigationManager.NavigateTo("/"); // Redirect to home if sprint not found
            }
        }
        else
        {
            currentSprint = null; // No sprint associated
        }
    }

    private void HandleEmojiChange(string emoji)
    {
        NewTicket.Emoji = emoji;
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(NewTicket.Title))
        {
            var randomTitles = new[] { "Quick Fix", "New Feature", "Bug Report", "Enhancement", "Improvement" };
            var random = new Random();
            NewTicket.Title = randomTitles[random.Next(randomTitles.Length)];
        }

        NewTicket.UserId = currentUserId;
        await TicketService.CreateAsync(NewTicket);

        if (NewTicket.SprintId != null)
        {
            NavigationManager.NavigateTo($"/sprint/{NewTicket.SprintId}");
        }
        else
        {
            NavigationManager.NavigateTo("/backlog");
        }
    }
}
